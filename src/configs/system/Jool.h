#ifndef JOOL_H
#define JOOL_H
char const *Jool_cfg = "// KittopiaTech - a Kopernicus Visual Editor\n"
"\n"
"@Kopernicus:NEEDS[!Kopernicus]\n"
"{\n"
"	Body\n"
"	{\n"
"		name = Jool\n"
"		barycenter = False\n"
"		identifier = Squad/Jool\n"
"		implements = \n"
"		finalizeOrbit = False\n"
"		randomMainMenuBody = False\n"
"		contractWeight = 30\n"
"		Properties\n"
"		{\n"
"			description = Jool is particularly known for being a rather large, predominantly green planet. Kerbalkind has longed to visit it since it was first spotted in the sky. Philosophers reason that the swirling green planet must be a really nice place to visit, on account of its wholesome coloration.If you look at Jool through a telescope, it is fuzzy.\n"
"			radius = 6000000\n"
"			geeASL = 0.800273295870079\n"
"			mass = 4.23321273059351E+24\n"
"			gravParameter = 282528004209995\n"
"			rotates = True\n"
"			rotationPeriod = 36000\n"
"			tidallyLocked = False\n"
"			initialRotation = 0\n"
"			inverseRotThresholdAltitude = 220000\n"
"			albedo = 0.52\n"
"			emissivity = 0.48\n"
"			coreTemperatureOffset = 80\n"
"			timewarpAltitudeLimits = 0 0 15000 60000 150000 300000 600000 1200000\n"
"			sphereOfInfluence = 2455985185.42347\n"
"			solarRotationPeriod = False\n"
"			navballSwitchRadiusMult = 0.06\n"
"			navballSwitchRadiusMultLow = 0.055\n"
"			nonExactThreshold = 0.05\n"
"			exactSearch = False\n"
"			useTheInName = False\n"
"			displayName = Jool^N\n"
"			selectable = True\n"
"			RnDVisibility = Visible\n"
"			RnDRotation = False\n"
"			maxZoom = 60000\n"
"			ScienceValues\n"
"			{\n"
"				landedDataValue = 30 // Science multiplier for landed science.\n"
"				splashedDataValue = 1 // Science multiplier for splashed down science.\n"
"				flyingLowDataValue = 12 // Science multiplier for flying low science.\n"
"				flyingHighDataValue = 9 // Science multiplier for flying high science.\n"
"				inSpaceLowDataValue = 7 // Science multiplier for in space low science.\n"
"				inSpaceHighDataValue = 6 // Science multiplier for in space high science.\n"
"				recoveryValue = 6\n"
"				flyingAltitudeThreshold = 120000 // Altitude when \"flying at <body>\" transitions from/to \"from <body>'s upper atmosphere\"\n"
"				spaceAltitudeThreshold = 4000000 // Altitude when \"in space low\" transitions from/to \"in space high\"\n"
"			}\n"
"		}\n"
"		Orbit\n"
"		{\n"
"			referenceBody = Sun // The body that this body is orbiting around.\n"
"			inclination = 1.30400002002716\n"
"			eccentricity = 0.0500000007450581\n"
"			semiMajorAxis = 68773560320 // The altitude of the highest point in the orbit\n"
"			longitudeOfAscendingNode = 52 // The position of the highest point on the orbit circle\n"
"			argumentOfPeriapsis = 0\n"
"			meanAnomalyAtEpoch = 0.100000001490116\n"
"			meanAnomalyAtEpochD = 5.72957803668559\n"
"			epoch = 0\n"
"			color = 0.329411775,0.521568656,0.0745098069,0.501960814 // The color of the orbit line in the Tracking Station\n"
"			nodeColor = 0.329411775,0.521568656,0.0745098069,0.501960814 // The color of the circle that marks the planets current position on the orbit\n"
"			mode = REDRAW_AND_RECALCULATE\n"
"			icon = ALL\n"
"			cameraSmaRatioBounds = 0.03 25\n"
"			period = 104661432.107989\n"
"		}\n"
"		ScaledVersion\n"
"		{\n"
"			type = Atmospheric\n"
"			fadeStart = 29000\n"
"			fadeEnd = 30000\n"
"			sphericalModel = False\n"
"			deferMesh = False\n"
"			invisible = False\n"
"			Material\n"
"			{\n"
"				color = 0.791044772,0.791044772,0.791044772,1\n"
"				specColor = 0,0,0,1\n"
"				shininess = 1\n"
"				texture = BUILTIN/gas1_clouds\n"
"				mainTexScale = 1,1\n"
"				mainTexOffset = 0,0\n"
"				normals = BUILTIN/cloud_normal\n"
"				bumpMapScale = 15,8\n"
"				bumpMapOffset = 0,0\n"
"				opacity = 1\n"
"				rimPower = 2.48\n"
"				rimBlend = 0.29\n"
"				rimColorRamp = BUILTIN/gas1_atmogradiant\n"
"				rimColorRampScale = 1,1\n"
"				rimColorRampOffset = 0,0\n"
"				localLightDirection = -0.85660249,0.143874586,0.495512158,0\n"
"				resourceMapScale = 1,1\n"
"				resourceMapOffset = 0,0\n"
"			}\n"
"		}\n"
"		Atmosphere\n"
"		{\n"
"			enabled = True // Whether the body has an atmosphere.\n"
"			oxygen = False // Whether the atmosphere contains oxygen.\n"
"			staticDensityASL = 6.70262205528434 // Atmospheric density at sea level. Used to calculate the parameters of the atmosphere if no curves are used.\n"
"			adiabaticIndex = 1.43\n"
"			atmosphereDepth = 200000 // The height of the atmosphere.\n"
"			gasMassLapseRate = 2.07657256052129\n"
"			atmosphereMolarMass = 0.0022\n"
"			pressureCurveIsNormalized = False // Whether the pressure curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.\n"
"			staticPressureASL = 1519.875 // The static pressure at sea level. Used to calculate the parameters of the atmosphere if no curves are used.\n"
"			temperatureCurveIsNormalized = False // Whether the temperature curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.\n"
"			temperatureLapseRate = 0.001\n"
"			temperatureSeaLevel = 200 // The static temperature at sea level. Used to calculate the parameters of the atmosphere if no curves are used.\n"
"			ambientColor = 0.0754820928,0.208955199,0.0686121732,1 // All objects inside of the atmosphere will slightly shine in this color.\n"
"			lightColor = 0.674509823,0.596078455,0.850980401,0\n"
"			addAFG = True\n"
"			pressureCurve // Assigns a pressure value to a height value inside of the atmosphere.\n"
"			{\n"
"				key = 0 5066.25 0 -0.6723968\n"
"				key = 10000 1519.875 -0.1346587 -0.1346587\n"
"				key = 29000 628.0436 -0.01449255 -0.01449255\n"
"				key = 123450 22.26 -0.001562163 -0.001562163\n"
"				key = 150000 2 -0.0001361465 -0.0001361465\n"
"				key = 170000 0.1 -1.001277E-05 -1.001277E-05\n"
"				key = 200000 0 0 0\n"
"			}\n"
"			temperatureCurve // Assigns a temperature value to a height value inside of the atmosphere.\n"
"			{\n"
"				key = 0 200 0 -0.001182922\n"
"				key = 29000 165 -0.001207278 -0.001207278\n"
"				key = 123450 120 0 0\n"
"				key = 168000 160 0.0009967944 0.0009967944\n"
"				key = 187500 175 0 0\n"
"				key = 194000 167 0 0\n"
"				key = 200000 350 0.08717471 0\n"
"			}\n"
"			temperatureSunMultCurve\n"
"			{\n"
"				key = 0 0 0 0\n"
"				key = 29000 0.5 0 0\n"
"				key = 123450 0.8 0 0\n"
"				key = 200000 1.5 0 0\n"
"			}\n"
"			temperatureLatitudeBiasCurve\n"
"			{\n"
"				key = 0 30 0 -0.0957164\n"
"				key = 50 10 -0.950278 -0.950278\n"
"				key = 70 -20 -1.955704 -1.955704\n"
"				key = 90 -40 -0.02418368 0\n"
"			}\n"
"			temperatureLatitudeSunMultCurve\n"
"			{\n"
"				key = 0 9 0 0.02746098\n"
"				key = 40 12 0.2295445 0.2295445\n"
"				key = 65 18 0 0\n"
"				key = 90 5 0 0\n"
"			}\n"
"			temperatureAxialSunBiasCurve\n"
"			{\n"
"				key = 0 0 0 0\n"
"			}\n"
"			temperatureAxialSunMultCurve\n"
"			{\n"
"				key = 0 0 0 0\n"
"			}\n"
"			temperatureEccentricityBiasCurve\n"
"			{\n"
"				key = 0 0 0 0\n"
"			}\n"
"			AtmosphereFromGround // The atmosphere effect that is seen on the horizon.\n"
"			{\n"
"				DEBUG_alwaysUpdateAll = False // Whether all parameters should get recalculated and reapplied every frame.\n"
"				doScale = True // Whether the atmosphere mesh should be scaled automatically.\n"
"				innerRadius = 5996250 // The lower bound of the atmosphere effect.\n"
"				invWaveLength = 4.83110952,7.92111492,1.90687299,0.5\n"
"				outerRadius = 6150000 // The upper bound of the atmosphere effect.\n"
"				samples = 4\n"
"				transformScale = 1.02499998,1.02499998,1.02499998 // The scale of the atmosphere mesh in all three directions. Automatically set if doScale is enabled.\n"
"				waveLength = 0.674509823,0.596078455,0.850980401,0\n"
"				outerRadiusMult = 1.025 // A multiplier that automatically sets outerRadius based on the planets radius.\n"
"				innerRadiusMult = 0.975 // A multiplier that automatically sets innerRadius based on the planets radius.\n"
"			}\n"
"		}\n"
"		Debug\n"
"		{\n"
"			exportMesh = True // Whether Kopernicus should save a .bin file with the ScaledSpace mesh.\n"
"			update = False // Setting this to true will force Kopernicus to update the ScaledSpace mesh.\n"
"			showSOI = False\n"
"		}\n"
"	}\n"
"}\n";
#endif